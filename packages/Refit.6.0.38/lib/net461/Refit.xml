<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Refit</name>
    </assembly>
    <members>
        <member name="F:Refit.BodySerializationMethod.Default">
            <summary>
            Encodes everything using the ContentSerializer in RefitSettings except for strings. Strings are set as-is
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.Json">
            <summary>
            Json encodes everything, including strings
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.UrlEncoded">
            <summary>
            Form-UrlEncode's the values
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.Serialized">
            <summary>
            Encodes everything using the ContentSerializer in RefitSettings
            </summary>
        </member>
        <member name="T:Refit.HeaderCollectionAttribute">
            <summary>
            Allows you provide a Dictionary of headers to be added to the request.
            </summary>
        </member>
        <member name="T:Refit.PropertyAttribute">
            <summary>
            Used to store the value in HttpRequestMessage.Properties for further processing in a custom DelegatingHandler.
            If a string is supplied to the constructor then it will be used as the key in the HttpRequestMessage.Properties dictionary.
            If no key is specified then the key will be defaulted to the name of the parameter.
            </summary>
        </member>
        <member name="P:Refit.PropertyAttribute.Key">
            <summary>
            Specifies the key under which to store the value on the HttpRequestMessage.Properties dictionary.
            </summary>
        </member>
        <member name="P:Refit.QueryAttribute.Delimiter">
            <summary>
            Used to customize the name of either the query parameter pair or of the form field when form encoding.
            </summary>
            <seealso cref="P:Refit.QueryAttribute.Prefix"/>
        </member>
        <member name="P:Refit.QueryAttribute.Prefix">
            <summary>
            Used to customize the name of the encoded value.
            </summary>
            <remarks>
            Gets combined with <see cref="P:Refit.QueryAttribute.Delimiter"/> in the format <code>var name = $"{Prefix}{Delimiter}{originalFieldName}"</code>
            where <c>originalFieldName</c> is the name of the object property or method parameter.
            </remarks>
            <example>
            <code>
            class Form
            {
              [Query("-", "dontlog")]
              public string password { get; }
            }
            </code>
            will result in the encoded form having a field named <c>dontlog-password</c>.
            </example>
        </member>
        <member name="P:Refit.QueryAttribute.Format">
            <summary>
            Used to customize the formatting of the encoded value.
            </summary>
            <example>
            <code>
            interface IServerApi
            {
              [Get("/expenses")]
              Task addExpense([Query(Format="0.00")] double expense);
            }
            </code>
            Calling <c>serverApi.addExpense(5)</c> will result in a URI of <c>{baseUri}/expenses?expense=5.00</c>.
            </example>
        </member>
        <member name="P:Refit.QueryAttribute.CollectionFormat">
            <summary>
            Specifies how the collection should be encoded.
            </summary>
        </member>
        <member name="P:Refit.QueryUriFormatAttribute.UriFormat">
            <summary>
            Specifies how the Query Params should be encoded.
            </summary>
        </member>
        <member name="T:Refit.Buffers.PooledBufferWriter">
            <summary>
            A <see langword="struct"/> that provides a fast implementation of a binary writer, leveraging <see cref="T:System.Buffers.ArrayPool`1"/> for memory pooling
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.DefaultSize">
            <summary>
            The default size to use to create new <see cref="T:Refit.Buffers.PooledBufferWriter"/> instances
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.buffer">
            <summary>
            The <see cref="T:System.Byte"/> array current in use
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.position">
            <summary>
            The current position into <see cref="F:Refit.Buffers.PooledBufferWriter.buffer"/>
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.#ctor">
            <summary>
            Creates a new <see cref="T:Refit.Buffers.PooledBufferWriter"/> instance
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.Advance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.GetMemory(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.GetSpan(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.EnsureFreeCapacity(System.Int32)">
            <summary>
            Ensures the buffer in use has the free capacity to contain the specified amount of new data
            </summary>
            <param name="count">The size in bytes of the new data to insert into the buffer</param>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.DetachStream">
            <summary>
            Gets a readable <see cref="T:System.IO.Stream"/> for the current instance, by detaching the used buffer
            </summary>
            <returns>A readable <see cref="T:System.IO.Stream"/> with the contents of the current instance</returns>
        </member>
        <member name="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream">
            <summary>
            An in-memory <see cref="T:System.IO.Stream"/> that uses memory buffers rented from a shared pool
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.length">
            <summary>
            The current used length for <see cref="F:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.pooledBuffer"/>
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.pooledBuffer">
            <summary>
            The buffer rented from <see cref="T:System.Buffers.ArrayPool`1"/> currently in use
            </summary>
        </member>
        <member name="F:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.position">
            <summary>
            The current position within <see cref="F:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.pooledBuffer"/>
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.#ctor(Refit.Buffers.PooledBufferWriter)">
            <summary>
            Creates a new <see cref="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream"/> instance
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Finalize">
            <summary>
            Releases the resources for the current <see cref="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream"/> instance
            </summary>
        </member>
        <member name="P:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.PooledMemoryStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowArgumentOutOfRangeExceptionForNegativeCount">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when a method receives a negative "count" parameter.
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowArgumentOutOfRangeExceptionForNegativeOffset">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when a method receives a negative "offset" parameter.
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowArgumentOutOfRangeExceptionForAdvancedTooFar">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when <see cref="M:Refit.Buffers.PooledBufferWriter.Advance(System.Int32)"/> advances too far.
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowArgumentOutOfRangeExceptionForEndOfStreamReached">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> when the end of a <see cref="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream"/> has been exceeded.
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowObjectDisposedException">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> when a <see cref="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream"/> method is called on a disposed instance.
            </summary>
        </member>
        <member name="M:Refit.Buffers.PooledBufferWriter.ThrowNotSupportedException">
            <summary>
            Throws an <see cref="T:System.NotSupportedException"/> when an operation in <see cref="T:Refit.Buffers.PooledBufferWriter.PooledMemoryStream"/> is not supported.
            </summary>
        </member>
        <member name="T:Refit.CollectionFormat">
            <summary>
            Collection format defined in https://swagger.io/docs/specification/2-0/describing-parameters/ 
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.RefitParameterFormatter">
            <summary>
            Values formatted with <see cref="P:Refit.RefitSettings.UrlParameterFormatter"/> or
            <see cref="P:Refit.RefitSettings.FormUrlEncodedParameterFormatter"/>.
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Csv">
            <summary>
            Comma-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Ssv">
            <summary>
            Space-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Tsv">
            <summary>
            Tab-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Pipes">
            <summary>
            Pipe-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Multi">
            <summary>
            Multiple parameter instances
            </summary>
        </member>
        <member name="T:Refit.FormValueMultimap">
            <summary>
            Transforms a form source from a .NET representation to the appropriate HTTP form encoded representation.
            </summary>
            <remarks>Performs field renaming and value formatting as specified in <see cref="T:Refit.QueryAttribute"/>s and
            <see cref="P:Refit.RefitSettings.FormUrlEncodedParameterFormatter"/>. A given key may appear multiple times with the
            same or different values.</remarks>
        </member>
        <member name="P:Refit.FormValueMultimap.Keys">
            <summary>
            Returns a key for each entry. If multiple entries share the same key, the key is returned multiple times.
            </summary>
        </member>
        <member name="T:Refit.HttpRequestMessageOptions">
            <summary>
            Contains Refit-defined properties on the HttpRequestMessage.Properties/Options
            </summary>
        </member>
        <member name="P:Refit.HttpRequestMessageOptions.InterfaceType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the top-level interface where the method was called from
            </summary>
        </member>
        <member name="T:Refit.ProblemDetails">
            <summary>
            The object representing the details about a ValidationException caught by a service implementing RFC 7807.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Errors">
            <summary>
            Collection of resulting errors for the request.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Extensions">
            <summary>
            Collection of ProblemDetails extensions
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Type">
            <summary>
            A URI reference that identifies the problem type.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Title">
            <summary>
            A short, human-readable summary of the problem type.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Status">
            <summary>
            The HTTP status code generated by the origin server for this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Detail">
            <summary>
            A human-readable explanation specific to this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Instance">
            <summary>
            A URI reference that identifies the specific occurrence of the problem.
            </summary>
        </member>
        <member name="M:Refit.RefitSettings.#ctor">
            <summary>
            Creates a new <see cref="T:Refit.RefitSettings"/> instance with the default parameters
            </summary>
        </member>
        <member name="M:Refit.RefitSettings.#ctor(Refit.IHttpContentSerializer,Refit.IUrlParameterFormatter,Refit.IFormUrlEncodedParameterFormatter)">
            <summary>
            Creates a new <see cref="T:Refit.RefitSettings"/> instance with the specified parameters
            </summary>
            <param name="contentSerializer">The <see cref="T:Refit.IHttpContentSerializer"/> instance to use</param>
            <param name="urlParameterFormatter">The <see cref="T:Refit.IUrlParameterFormatter"/> instance to use (defaults to <see cref="T:Refit.DefaultUrlParameterFormatter"/>)</param>
            <param name="formUrlEncodedParameterFormatter">The <see cref="T:Refit.IFormUrlEncodedParameterFormatter"/> instance to use (defaults to <see cref="T:Refit.DefaultFormUrlEncodedParameterFormatter"/>)</param>
        </member>
        <member name="P:Refit.RefitSettings.AuthorizationHeaderValueGetter">
            <summary>
            Supply a function to provide the Authorization header. Does not work if you supply an HttpClient instance.
            </summary>
        </member>
        <member name="P:Refit.RefitSettings.AuthorizationHeaderValueWithParamGetter">
            <summary>
            Supply a function to provide the Authorization header. Does not work if you supply an HttpClient instance.
            </summary>
        </member>
        <member name="P:Refit.RefitSettings.HttpMessageHandlerFactory">
            <summary>
            Supply a custom inner HttpMessageHandler. Does not work if you supply an HttpClient instance.
            </summary>
        </member>
        <member name="P:Refit.RefitSettings.ExceptionFactory">
            <summary>
            Supply a function to provide <see cref="T:System.Exception"/> based on <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            If function returns null - no exception is thrown.
            </summary>
        </member>
        <member name="M:Refit.IHttpContentSerializer.GetFieldNameForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Calculates what the field name should be for the given property. This may be affected by custom attributes the serializer understands
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Refit.SystemTextJsonContentSerializer">
            <summary>
            A <see langword="class"/> implementing <see cref="T:Refit.IHttpContentSerializer"/> using the System.Text.Json APIs
            </summary>
        </member>
        <member name="F:Refit.SystemTextJsonContentSerializer.jsonSerializerOptions">
            <summary>
            The JSON serialization options to use
            </summary>
        </member>
        <member name="M:Refit.SystemTextJsonContentSerializer.#ctor">
            <summary>
            Creates a new <see cref="T:Refit.SystemTextJsonContentSerializer"/> instance
            </summary>
        </member>
        <member name="M:Refit.SystemTextJsonContentSerializer.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a new <see cref="T:Refit.SystemTextJsonContentSerializer"/> instance with the specified parameters
            </summary>
            <param name="jsonSerializerOptions">The serialization options to use for the current instance</param>
        </member>
        <member name="M:Refit.SystemTextJsonContentSerializer.ToHttpContent``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Refit.SystemTextJsonContentSerializer.FromHttpContentAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Refit.ValidationApiException">
            <summary>
            An ApiException that is raised according to RFC 7807, which contains problem details for validation exceptions.
            </summary>
        </member>
        <member name="M:Refit.ValidationApiException.Create(Refit.ApiException)">
            <summary>
            Creates a new instance of a ValidationException from an existing ApiException.
            </summary>
            <param name="exception">An instance of an ApiException to use to build a ValidationException.</param>
            <returns>ValidationApiException</returns>
        </member>
        <member name="P:Refit.ValidationApiException.Content">
            <summary>
            The problem details of the RFC 7807 validation exception.
            </summary>
        </member>
        <member name="M:Refit.XmlReaderWriterSettings.ApplyOverrideSettings">
            <summary>
            The writer and reader settings are set by the caller, but certain properties
            should remain set to meet the demands of the XmlContentSerializer. Those properties
            are always set here.
            </summary>
        </member>
        <member name="T:System.Net.Http.PushStreamContent">
            <summary>
            Provides an <see cref="T:System.Net.Http.HttpContent"/> implementation that exposes an output <see cref="T:System.IO.Stream"/>
            which can be written to directly. The ability to push data to the output stream differs from the 
            <see cref="T:System.Net.Http.StreamContent"/> where data is pulled and not pushed.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class. The
            <paramref name="onStreamAvailable"/> action is called when an output stream
            has become available allowing the action to write to it directly. When the 
            stream is closed, it will signal to the content that is has completed and the 
            HTTP request or response will be completed.
            </summary>
            <param name="onStreamAvailable">The action to call when an output stream is available.</param>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class. 
            </summary>
            <param name="onStreamAvailable">The action to call when an output stream is available. The stream is automatically
            closed when the return task is completed.</param>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given media type.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given media type.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.PushStreamContent.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            When this method is called, it calls the action provided in the constructor with the output 
            stream to write to. Once the action has completed its work it closes the stream which will 
            close this content instance and complete the HTTP request or response.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="context">The associated <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that is asynchronously serializing the object's content.</returns>        
        </member>
        <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
            <summary>
            Computes the length of the stream if possible.
            </summary>
            <param name="length">The computed length of the stream.</param>
            <returns><c>true</c> if the length has been computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.Net.Http.DelegatingStream">
            <summary>
            Stream that delegates to inner stream. 
            This is taken from System.Net.Http
            </summary>
        </member>
    </members>
</doc>
